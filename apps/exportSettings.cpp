#include <stdio.h>
#include "settings.h"

// TODO seriously consider some sort of settings container!

extern long int _timelapseLimit; // TODO hopefully 0 if 'indefinite'
extern long int _timelapseStep;

extern int previewX;
extern int previewY;
extern int previewW;
extern int previewH;

extern int _captureW;
extern int _captureH;
extern bool _capturePNG;
extern const char *_captureFolder;

extern double _zoom;
extern double _panH;
extern double _panV;

extern const char *getExposureString();
extern const char *getMeteringString();

// dialog box to pick amongst subsets: timelapse, capture, zoom, ... ; pick file to export to
// add comment for header
// TODO don't write setting if unchanged! OPTION

#define TIMELAPSE_SET 0x2
#define CAPTURE_SET   0x4
#define ZOOM_SET      0x8
#define PREVIEW_SET   0x10
#define ADVANCED_SET  0x20
#define COMMENT_SET   0x40

void writeDouble(FILE *f, const char *str, double val)
{
    fprintf(f, "%s=%g\n", str, val);
}

void writeBool(FILE *f, const char *str, bool val)
{
    fprintf(f, "%s=%s\n", str, val ? "true" : "false");
}

void writeInt(FILE *f, const char *str, long int val)
{
    fprintf(f, "%s=%ld\n", str, val);
}

void writeString(FILE *f, const char *str, const char *val, bool delimit=false)
{
    if (delimit)
        fprintf(f, "%s='%s'\n", str, val);
    else
        fprintf(f, "%s=%s\n", str, val);
}

void writeConfigFile(const char *filename, int options)
{
    
    FILE *f = fopen(filename, "w");

    fprintf(f, "# libcamera-app config file\n");
    fprintf(f, "# generated by libcam_fltk\n"); // TODO timestamp
    fprintf(f, "\n");
    
    // Basic settings
    fprintf(f, "# basic settings\n");
    writeDouble(f, "analoggain", _analogGain);
    writeDouble(f, "brightness", _bright);
    writeDouble(f, "contrast", _contrast);
    writeDouble(f, "ev", _evComp);
    writeString(f, "exposure", getExposureString());
    writeBool  (f, "hflip", _hflip);
    writeString(f, "metering", getMeteringString());
    writeDouble(f, "saturation", _saturate);
    writeDouble(f, "sharpness", _sharp);
    writeBool  (f, "vflip", _vflip);

    // preview settings
    if (options & PREVIEW_SET)
    {
        fprintf(f, "\n");
        fprintf(f, "# preview settings\n");
        writeBool(f, "fullscreen", false);
        writeBool(f, "nopreview", _previewOn);
        
        // preview X,Y,W,H
        fprintf(f, "preview=%d,%d,%d,%d\n",previewX,previewY,previewW,previewH);        
    }
    
    // timelapse settings
    if (options & TIMELAPSE_SET)
    {
        fprintf(f, "\n");
        fprintf(f, "# timelapse settings\n");
        writeInt(f, "timelapse", _timelapseStep);
        writeInt(f, "timeout", _timelapseLimit);
    }

    // capture settings
    if (options & CAPTURE_SET)
    {
        fprintf(f, "\n");
        fprintf(f, "# capture settings\n");

        writeString(f, "encoding", _capturePNG ? "png" : "jpg");
        writeInt(f, "height", _captureH);
        
        // TODO this doesn't work
        // writeString(f, "output", _captureFolder, true);
        
        writeBool(f, "timestamp", true);
        writeInt(f, "width", _captureW);
    }
    
    // zoom settings
    if (options & ZOOM_SET)
    {
        fprintf(f, "\n");
        fprintf(f, "# zoom setting\n");
        fprintf(f, "roi=%g,%g,%g,%g\n", _panH, _panV, _zoom, _zoom);
    }
    
#if 0
    // zoom settings
    roi -,-,-,-
    
    // advanced
    awb
    awbgains
    
#endif
    
    fclose(f);
}



void do_export_settings()
{
    // TODO dialog box
    writeConfigFile("config.txt", 0xFFFF);
}
